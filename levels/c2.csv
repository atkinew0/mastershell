level,prompt,answer1,answer2
2,display contents of file ‘test 1’ to standard output,cat test1,
2,"display contents of file ‘test 1’ including endlines, tabs, and non printing characters to standard output",cat -A test1,cat -vET test1
2,display contents of files ‘test1’ and ‘test2’ to standard out,cat test1 test2,
2,display contents of ‘test1’ to standard out with line numbering,cat -n test1,
2,write contents of file ‘test1’ into file ‘test2’,cat test1 > test2,
2,write standard in to a file ‘test2’,cat > test2,
3,copy file ‘test1’ to a new file called ‘test2’,cp test1 test2,
3,copy contents of directory ‘dir1’ to new directory ‘dir2’,cp -r dir1 dir2,cp -R dir1 dir2
3,copy all files inside ‘dir1’ into existing directory ‘dir2’,cp dir1/* dir2,
3,copy file ‘test1’ over existing file ‘test2’ only if test1 is newer than test2,cp -u test1 test2,
3,copy files ‘test1’ to ‘test2’ while displaying all lines copied,cp -v test1 test2,
4,move file named ‘test1’ to a new file named ‘test3’ (ie rename file),mv test1 test3,
4,"move file named ‘test1’ to a  file named ‘test3’ (ie rename file), but do not overwrite if ‘test3’ exists",mv -n test1 test3,
4,move file named ‘test1’ to file named ‘test4’ while outputting verbosely,mv -v test1 test4,
4,move directory ‘dir1’ to a new directory named ‘dir3’,mv dir1 dir3,
4,move file named ‘test1’ to file named ‘test2’ but only if test1 is newer than test2,mv -u test1 test2,
5,create a file called ‘test’ in the current working directory,touch test,
5,Create 26 new files in the current working directory named alphabetically A through Z ,touch {A..Z},
5,Update the access and modification time of file ‘test1’ to current time,touch test1,
5,Update access and modification time of all files and folders in the current working directory,touch *,
6,Delete (unlink name from filesystem) a file called ‘test1’ in the current working directory,rm test1,
6,Delete (unlink name from file system) a directory called ‘dir1’ in the current working directory,rm -r dir1,
6,Overwrite file named ‘test1’ in current working directory so it cannot be recovered,shred test1,
6,Delete (unlink name from file system) a file called ‘test1’ while printing actions to stdout,rm -v,
6,Delete (unlink name from file system) a file called ‘test1’ with prompting before deletion,rm -i test1,
6,"Delete (unlink name from file system) a directory called ‘dir1’ in the current working directory, do not ask before deleting write protected files",rm -rf dir1,
7,change attributes of file ‘test1’ to add write protection (made need superuser permissions),chattr +i test1,
7,List file attributes of the file ‘test1’,lsattr test1,
7,List attributes of contents of current working directory,lsattr,
7,change attributes of file ‘test1’ to add append only protection (made need superuser permissions),chattr +a test1,
7,change attributes of file ‘test1’ to remove append only protection (made need superuser permissions),chattr -a test1,
7,change attributes of the directory ‘dir1’ to make write protected (made need superuser permissions),chattr +i dir1,
7,change attributes of the directory ‘dir1’ to remove write protection (made need superuser permissions),chattr -i dir1,
8,output name of current user,whoami,logname
8,output name and group information of current user,id,
8,output name of current users logged in to the system,w,
8,output current time and how long the system has been running,uptime,
8,display message ‘hello’ to all users currently logged in to the system,wall hello,
9,display the UNIX manual page for the program ls (then quit manual with ‘q’),man ls,
9,display the GNU info page for the program ls (then quit),info ls,
9,display the pathname of the file(program) which would run if you typed ls,which ls,
9,display simply one line description of behavior of program ‘ls’,whatis ls,
9,display the manual page for the manual itself,man man,
9,display the manual page for C standard library function ‘fopen’ (Not a terminal command),man 3 fopen,man fopen
9,display the manual page for terminal command ‘printf’,man printf,Man 1 printf
9,display the manual page for the C standard library function ‘printf’ (not the terminal command),man 3 printf,
,"display the manual page for the Linux system call ‘open’ (note the OS syscall, not terminal or C stdlib)",man 2 open,
10,display the current date and time on the system,date,
10,"display the current epoch time in seconds (seconds since January 1st, 1970)",date +%s,
10,use date command to convert current epoch time in seconds to a date,date -d @,
10,display calendar of events for the current month,calendar,
11,"check what type of file ‘test1’ is (ASCII, elf etc)",file test1,
11,check what type of files all files in the current directory are,file *,
11,check what type of files all files in the ‘/boot’ directory are,file boot*,
12,"create a tar archive from file ‘test1’ called ‘test1.tar’ using flags for create mode, verbose and specifying file name",tar -cvf test1.tar test1,
12,check the file type of file named ‘test1.tar’,file test1.tar,
12,extract to current directory contents of tar archive called ‘test1.tar’ using verbose flag,tar -xvf test1.tar,tar -xf test1.tar
12,extract contents of tar archive called ‘test1.tar’ to stdout (may be disallowed),tar -xv test1.tar,tar -xvf – test1.tar
12,create archive of directory ‘dir1’ called ‘dir1.tar’ in verbose mode,tar -cvf dir1.tar dir1,
12,"use tar to create a gzip archive from file ‘test1’ called ‘test1.tar.gz’ using flags for create mode, verbose and specifying file name",tar -cvzf test1.tar.gz test1,
12,use tar to extract gzip archive from file called ‘test1.tar.gz’ using verbose mode,tar -xvf test1.tar.gz,
12,use tar to list contents of archive called ‘test1.tar.gz’,tar -tvf test1.tar.gz,
13,display ‘hello’ to the stdout,echo ‘hello’,echo hello
13,display ‘hello’ to stdout without automatic newline added,echo -n ‘hello’,
13,declare a local variable x and set it equal to 10,x=10,
13,echo the value of the variable x,echo $x,echo “$x”
13,echo the return value of the last program run,echo $?,
13,echo to the terminal the control character represented by ‘\x03’,echo -e ‘\x03’,
13,use echo to print names of all files in the current directory (like ls –color=never),echo *,
13,use echo to print names of files that end with .tar in current directory,echo *.tar,
13,use echo to display the contents of your PATH variable,echo $PATH,
14,display the usage of disk capacity for all currently mounted filsystems,df,
14,display the usage of disk capacity in human readable format,df -h,
14,display usage of inodes capacity in the filesystem,df -i,
14,display usage of disk capacity for all currently mounted filesystems along with file system type,df -T,
14,list all files that are currently open on the system,lsof,
14,display all system configuration variables ,getconf -a,
15,display the value of all environmental variables for the current environment,env,printenv
15,execute the command ‘ls’ with all environmental variables turned off,env -i ls,
15,echo an environmental variable for the shell used,echo $SHELL,
15,set an environmental variable for the session to ‘MYVAR=10’,export MYVAR=10,
15,echo the value of MYVAR to terminal,echo $MYVAR,echo “$MYVAR”
15,remove the variable MYVAR from the current environment,unset MYVAR,
15,use export to display all variables declared in the current environment,export -p,export
15,display all local variables and function declarations,set,
16,print the last 10 lines of file ‘longfile’ to standard out,tail longfile,
16,print the last 20 lines of file ‘longfile’ to standard out,tail -n 20 longfile,
16,continually check the last 10 lines of the file ‘longfile’ and print changes (Ctrl + C to exit),tail -f longfile,
16,clear the terminal window,clear,
16,list the files in the system log files directory  (in ubuntu check /var/log ),ls /var/log,
16,print the last 10 lines of the syslog file,tail /var/log/syslog,
17,write the output of the command ‘man grep’ to a file called test1,man grep > test1,
17,search and print all lines in file test1 in which the word shell occurs,grep shell test1,grep “shell” test1
17,copy file test1 to new file test2 and search all files in directory for word shell,grep shell *,grep shell test1 test2
17,search and print all lines in file test1 in which the word manual occurs ignoring case,grep -i manual test1,
17,search and print all lines in file test1 which do NOT contain the word grep,grep -v grep test1,
17,search and print all lines in file test1 which match anything (.*),grep .* test1,
17,search all files (but not subdirectories) in directory dir1 for word shell,grep shell dir1/*,
17,search directory dir1 and its subdirectories for word shell,grep -r shell dir1,
17,print the number of occurrences of the word shell in file test1,grep -c shell test1,
17,search and print all lines along with line numbers which contain the word shell in test1,grep -n shell test1,
18,print the version of the Linux kernel you are using,uname -r,
18,print all information available about system kernel and hardware platform,uname -a,
18,print the system hostname as it would appear in a DNS server,hostname,uname -n
18,run the command ls as superuser (ok if this command fails if you do not have root password),sudo ls,
18,type the command you would use to become superuser (ok to fail if you do not have root password),sudo su,
19,show the current process status for active processes in the current shell,ps,
19,show the current process status for all processes on the system,ps -A,ps -e
19,show the current system processes in a tree format (ie showing parent child relationships),ps -e --forest,ps -A --forest
19,show the current system processes in order of %mem they are using,ps -e --sort=%mem,ps -A | grep sys
19,search and print processes which contain the substring sys,ps -e | grep sys,ps -A | grep sys
19,lookup process id (PID) by name for processes including string sys,pgrep sys,
20,"run program to page through syslog (/var/log/syslog), then type q to quit",less /var/sys/log,more /var/sys/log
20,run program to page through syslong (/var/log/syslog) as a background process (use space between all terms),less /var/sys/log &,more /var/sys/log &
20,Print current background jobs,jobs,
20,"NOTE - jobs may not have man or info pages, enter another way to check jobs command options",jobs --help,
20,Print current background jobs along with PID,jobs -l,
20,Send an signal to the background job to kill it using its job# ( %1),kill %1,
20,Again run program to page through syslong (/var/log/syslog) as a background process (use space between all terms),less /var/sys/log &,more /var/sys/log &
20,Get the PID of the background job you ran using pgrep,pgrep less,pgrep more
20,Send a SIGKILL signal to that PID to kill the job,kill -9,kill -s SIGKILL
20,List all possible signals that can be sent to processes using the kill command,kill -l,
21,create a file called ‘test3’ in the current working directory by running man ls > test3,man ls > test1,
21,"run command to print number of lines, words, and bytes in file test3",wc test3,
21,run command to print only the number of lines in file test3,wc -l test3,
21,run command to print only the number of words in file test3,wc -w test3,
21,run this command to generate a copy of test3 with line numbers added named test4 cat -n test3 > test4,cat -n test3 > test4,
21,print a sorted (default sorting) output of test4,sort test4,
21,print a sorted (sort by numerical value) output of test4,sort -g test4,sort -n test4
21,print a reversed sort by numerical value of test4,sort -rg test4,sort -rn test4
21,check if file test4 is sorted using the sort command,sort -c test4,
22,run a command to repeatedly print “hello” to the screen until stopped with Ctrl+C,yes hello,
22,run a command to repeatedly print “hello” to the screen and then send to background while it is running,yes hello,
22,"bring back that job that was stopped into the foreground (ie controlling the terminal), then stop with Ctrl + C",fg %1,
22,run a command to check the location of the program that will run if you type ‘yes’,which yes,whereis yes
22,print that binary file to stdout as if it were normal text (use absolute file paths),cat /usr/bin/yes,cat /usr/bin/yes
22,print only the human readable (ie ascii text) strings in that binary file to stdout,strings /usr/bin/yes,
22,print only the human readable (ie ascii text) strings in that binary file to a file called ‘yes’,strings /usr/bin/yes,
22,"print the human readable (ie ascii text) strings in that binary file to a file called ‘yes2’, removing duplicate lines",strings /usr/bin/yes | sort | uniq,strings /usr/bin/yes | sort -u
22,print lines where files yes and yes2 differ,diff yes yes2,
22,print lines where files yes and yes2 differ in side by side view,diff -y yes yes2,
23,display information about your cpu,lscpu,
23,display information about system hardware (note- restricted if not superuser),lshw,
23,display information about block devices on your system,lsblk,
23,display information about block devices on your system with file system type,lsblk -f,
23,display information about address ranges of available memory,lsmem,
23,display information about pci devices on the system,lspci,
23,display information about usb devices on the system,lsusb,
23,run program to display real-time process by resource usage,top,
23,display the size on disk of a directory named dir1,du,
23,display the side on disk of a directory named dir1 in human readable format,du -h,
23,display the size on disk of all files and directories in the current folder in human readable format,du * -h,
23,display the size on disk of contents of /home as a single number,du -s /home,
23,display the time it takes to run the command to display size of /home as a summary,time du -s /home,
23,display the current usage of system memory,free,
23,display the current usage of system memory in human readable format,free -h,
24,search and list all files in the /home directory whose filename ends with the extension .db,find /home -name *.db,
24,search and list files in the current directory for a file or folder matching dir2,find . -name dir2,
24,search and list all files in the home directory whose size is 5MB or greater,find /home -size +5M,
24,search and list all files in the home directory which are executable,find /home -executable,
24,"search and find all files or folders in the current directory matching ‘dir’, then execute command cat on them",find . dir -exec cat {} \;,
24,search and list files in the /home directory that are empty,find /home -empty,
24,search and find all files or folders ending in .jpg  using locate database ,locate test,
24,create a new empty file called ‘test5’ in current directory,touch test5,
24,search in locate database for file test5,locate test5,
24,run command to update locate database to reflect most recent information (note may require superuser),updatedb,sudo updatedb
24,search in locate database for file test5,locate test5,
24,search locate database for all shell scripts (file extension .sh) and print only number found,locate -c *.sh,
24,search locate database using regular expression /test$ to match only exact filename test,locate -r /test$,
25,list all currently defined command aliases,alias,
26,create a temporary (only for this session) alias so that typing ‘long’ runs the command ‘ls -al’,alias long=’ls -al’,
26,create a (only for this session) alias so that typing ‘back’ runs the command ‘cd -’ (returns you to previous directory),alias back=’cd -’,
26,create a temporary (only for this session) alias so that typing ‘lsf’ runs the commands ‘ls -al’ AND lsattr,alias lsf=’ls -al; lsattr’,
27,remove alias defined for lsf,unalias lsf,
28,"enter command to change your user password, (then type Enter twice to cancel password change)",passwd,
28,enter command to indicate your user password status,passwd -S,
28,enter the command to create a new user (will fail unless superuser),adduser,
29,enter command to print file test6 with all lowercase letters translated to upper case,cat test6 | tr “[a-z]” “[A-Z]”,cat test6 | tr [a-z] [A-Z]
29,enter command to print file test6 with all letters upper and lower case shifted by 13 places (format n-za-mN-ZA-M),cat test6 | tr a-zA-Z n-za-mN-ZA-M,cat test6 | tr a-zA-Z n-za-mN-ZA-M
29,enter command to print file test6 with all parentheses changed to brackets {},cat test6 | tr ‘()’ ‘{}’,cat test6 | tr ‘()’ ‘{}’
29,enter command to print file test6 with all digits removed (format [:digit:] ),cat test6 | tr -d [:digit:],
29,enter command to print file test6 with only digits remaining (the complement set of the last command),cat test6 | tr -cd [:digit:],
29,print a sequence of numbers 1 to 15,seq 15,echo {1..15}
29,print a sequence of numbers 1 to 15 on a single line (single space in between),seq -s “ “ 15,echo {1..15}
30,print information on your current private ip address,ip addr,ip address
30,ping the server at google.com continuously,ping google.com,
30,ping the server at google.com only twice,ping -c 2 google.com,
30,ping the server at amazon.com with an audible alert,ping -a amazon.com,
30,check DNS server to get the ip address of google.com,nslookup google.com,dig google.com
30,run utility to display list of open socket connections,ss,
30,display list of listening socket connections,ss -l,
30,display list of tcp listening socket connections,ss -lt,
30,display list of socket connections along with process using them,ss -p,
30,use command to download page at address http://google.com,wget http://google.com,
30,use command to download all entries found in file download.txt,wget -i download.txt,
30,use telnet protocol to connect to freechess.org port 5000,telnet freechess.org 5000,
30,try to use ssh protocol to connect to freechess.org port 5000 as user,ssh user@freechess.org -p 5000,
31,print all the commands you have entered at the command line,history,
31,repeat the last command you entered (note - not using arrow functionality),!!,
31,repeat the last command you entered as the superuser,sudo !!,
31,search the history command output for “passwd”,history | grep passwd,
31,start a program listening for traffic on port 1234,nc -l 1234,
31,enter command to send messages to localhost (127.0.0.1) port 1234,nc 127.0.0.1 1234,nc localhost 1234
